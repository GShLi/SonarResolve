[tool.poetry]
name = "sonar-resolve"
version = "1.0.0"
description = "SonarQube Critical Issues Auto-Fix and Jira Integration Tool"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
package-mode = false
packages = [{include = "sonar_resolve", from = "src"}]
keywords = ["sonarqube", "jira", "ai", "automation", "code-quality"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Bug Tracking",
]

[tool.poetry.dependencies]
python = "^3.9"
requests = "^2.31.0"
jira = "^3.5.0"
python-dotenv = "^1.0.0"
pydantic = "^2.5.0"
GitPython = "^3.1.40"
python-gitlab = "^4.1.0"
dotenv = "^0.9.9"
croniter = "^2.0.0"

[tool.poetry.extras]
# Note: AI functionality requires Python >=3.9 due to upstream dependencies
# For Python 3.8 users, install without AI extras and configure manual dependency management
ai = ["openai", "anthropic"]
all = ["openai", "anthropic"]

[tool.poetry.group.ai.dependencies]
# AI packages (requires Python >=3.9)
openai = {version = "^1.0.0", python = ">=3.9"}
anthropic = {version = "^0.5.0", python = ">=3.9"}

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
black = "^23.0.0"
isort = "^5.12.0"
flake8 = "^6.1.0"
mypy = "^1.5.0"
pre-commit = "^3.4.0"

[tool.poetry.scripts]
sonar-jira = "src.sonar_resolve.core.main:main"
sonar-autofix = "src.sonar_resolve.core.auto_fix:main"
sonar-test = "scripts.test_connections:main"
project-manager = "scripts.project_manager:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --cov=. --cov-report=term-missing"
testpaths = [
    "tests",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "venv/*",
    ".venv/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
